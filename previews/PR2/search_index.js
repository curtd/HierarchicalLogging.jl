var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Hierarchical-Logging","page":"API","title":"Hierarchical Logging","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [HierarchicalLogging]\nOrder   = [:type, :function, :constant, :module] \nPrivate = false","category":"page"},{"location":"api/#HierarchicalLogging.HierarchicalLogger","page":"API","title":"HierarchicalLogging.HierarchicalLogger","text":"HierarchicalLogger{T<:AbstractLogger} <: AbstractLogger\n\nAn AbstractLogger consisting of one or more child loggers of type T with associated names of the form\n\n    key₁.key₂.key₃. ... .keyₙ\n\nGiven H::HierarchicalLogger, the parent of logger L with label key₁.key₂. ... .keyⱼ is the logger P ∈ H sharing the longest prefix with L, i.e., the label for P is key₁.key₂. ... .keyᵢ for i < j maximal in H. \n\nThis collection always contains a logger at the root with an empty label. \n\n\n\n\n\n","category":"type"},{"location":"api/#HierarchicalLogging.HierarchicalLogger-Tuple{Base.CoreLogging.AbstractLogger}","page":"API","title":"HierarchicalLogging.HierarchicalLogger","text":"HierarchicalLogger(root_logger; [propagate] [, delimiter] [, min_logging_level])\n\nConstructs a HierarchicalLogger with root_logger at its root.\n\nArguments\n\nroot_logger::AbstractLogger: Logger associated with the root node\npropagate::PropagateToChildren.Mode=PropagateToChildren.None: Determines how messages send to a node are propagated to its children\ndelimiter::Char='.': Parent-child delimiter in the string representation of a node\nmin_logging_level::LogLevel=All: Sets the initial minimum logging level for all loggers\n\n\n\n\n\n","category":"method"},{"location":"api/#HierarchicalLogging.MutableLogLevel","page":"API","title":"HierarchicalLogging.MutableLogLevel","text":"MutableLogLevel\n\nA type representing a LogLevel that can be modified in-place\n\n\n\n\n\n","category":"type"},{"location":"api/#HierarchicalLogging.MutableLogLevelLogger","page":"API","title":"HierarchicalLogging.MutableLogLevelLogger","text":"MutableLogLevel{T<:AbstractLogger} <: AbstractLogger\n\nA type associating a log level and name with an underlying logger::AbstractLogger\n\n\n\n\n\n","category":"type"},{"location":"api/#HierarchicalLogging.MutableLogLevelLogger-Tuple{Base.CoreLogging.AbstractLogger, Base.CoreLogging.LogLevel, String}","page":"API","title":"HierarchicalLogging.MutableLogLevelLogger","text":"MutableLogLevelLogger(base_logger::AbstractLogger,        initial_log_level::LogLevel, name::String)\n\nReturns a MutableLogLevelLogger with initial_log_level and name\n\n\n\n\n\n","category":"method"},{"location":"api/#HierarchicalLogging.closest_registered_logger","page":"API","title":"HierarchicalLogging.closest_registered_logger","text":"closest_registered_logger(h::HierarchicalLogger{T}, key) -> T\n\nIf haskey(h, key), returns the logger associated with key.\n\nOtherwise, returns the logger L ∈ h whose asssociated key K satisfies startswith(key, K) and the key of L is of maximal length among all such loggers in h.\n\n\n\n\n\n","category":"function"},{"location":"api/#HierarchicalLogging.insert_logger!","page":"API","title":"HierarchicalLogging.insert_logger!","text":"insert_logger!(loggers::HierarchicalLogger, key, logger, [level=min_enabled_level(logger)])\n\nAdds logger with associated key to loggers, if it does not exist.\n\nThrows an ArgumentException if there is an existing logger in loggers with key\n\n\n\n\n\n","category":"function"},{"location":"api/#HierarchicalLogging.min_enabled_level!-Tuple{HierarchicalLogger, Any}","page":"API","title":"HierarchicalLogging.min_enabled_level!","text":"min_enabled_level!(h::HierarchicalLogger, level; [force], [recurse]) -> LogLevel\n\nSets the logging level of the root logger in `h` to `level`. Any messages the root logger receives below `level` will be discarded and not logged.\n\nReturns the minimum `LogLevel` over all loggers in `h`.\n\n\n\n\n\n","category":"method"},{"location":"api/#HierarchicalLogging.min_enabled_level!-Tuple{HierarchicalLogger, Vector{SubString{String}}, Any}","page":"API","title":"HierarchicalLogging.min_enabled_level!","text":"min_enabled_level!(h::HierarchicalLogger, key, level; [force=true], [recurse=true]) -> LogLevel\n\nRecursively sets the level of logger L associated with key in h. \n\nIf haskey(h, key), sets the logging level of L (and, if recurse == true, the level of all of its children) to level. If the current logging level of L is greater than level, this method will not change the existing level if force == false.\n\nIf haskey(h, key) == false, a logger is added to key (with base logger underlying_logger(closest_logger(h, key)))\n\nReturns the new LogLevel associated with key\n\n\n\n\n\n","category":"method"},{"location":"api/#HierarchicalLogging.min_enabled_level!-Tuple{MutableLogLevelLogger, Any}","page":"API","title":"HierarchicalLogging.min_enabled_level!","text":"min_enabled_level!(logger::MutableLogLevelLogger, level) -> LogLevel\n\nSets minimum enabled level for logger to level. e.g., the low level below or equal to which all messages are filtered.\n\n\n\n\n\n","category":"method"},{"location":"api/#HierarchicalLogging.set_logger!-Tuple{HierarchicalLogger, Vector{SubString{String}}, Any}","page":"API","title":"HierarchicalLogging.set_logger!","text":"set_logger!(loggers, key, logger)\n\nSets the logger associated with key in loggers to logger. \n\nIf there is an existing value associated with key in loggers, it is overwritten. The new level of key is set to the maximum of the previous log level associated to key and the current level for logger.\n\n\n\n\n\n","category":"method"},{"location":"api/#HierarchicalLogging.underlying_logger-Tuple{MutableLogLevelLogger}","page":"API","title":"HierarchicalLogging.underlying_logger","text":"underlying_logger(logger::MutableLogLevel{T}) -> T\n\nReturns the underlying logging object associated with logger\n\n\n\n\n\n","category":"method"},{"location":"api/#HierarchicalLogging.ROOT_LOGGER_KEY","page":"API","title":"HierarchicalLogging.ROOT_LOGGER_KEY","text":"ROOT_LOGGER_KEY\n\nLogger key to which all other loggers are children\n\n\n\n\n\n","category":"constant"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = HierarchicalLogging","category":"page"},{"location":"#HierarchicalLogging","page":"Home","title":"HierarchicalLogging","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"HierarchicalLogging provides the HierarchicalLogger type, a Base.Logging-compatible logger which can be used to associate a collection of loggers to hierarchically-related objects. E.g., each node N is associated with a .-delimited key ","category":"page"},{"location":"","page":"Home","title":"Home","text":"key(N) = key₁.key₂. ... .keyₙ","category":"page"},{"location":"","page":"Home","title":"Home","text":"and a node P is the parent of node C if startswith(label(C), label(P)). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The prototypical example is the module -> submodule relationship in Julia, but you might have your own hierarchically-related objects that you'd like to associate a logger with.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Each node has an associated LogLevel which can be set via min_enabled_level!(logger, key, level), which also recursively sets the level of all children of the node with key. This can be helpful for loggers tied to specific submodules which are particularly noisy. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using HierarchicalLogging, Logging\n\nmodule A\n    module B\n       module C\n       end\n    end\nend\nmodule A1\n    module B1\n    end\nend\nmodule A2 \nend\n# Logger attached to the root has the lowest possible logging level \nh = HierarchicalLogger(ConsoleLogger(All))\nglobal_logger(h)\ninsert_logger!(h, A.B, ConsoleLogger(Warn))\ninsert_logger!(h, A1, ConsoleLogger(Debug))\n@info \"Hey\" _module=A.B.C _file=nothing _line=1\n@warn \"Uhoh\" _module=A.B.C _file=nothing _line=1\n# A was never registered to h, so it will use the root logger to log\n@debug \"In A\" _module=A _file=nothing _line=1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Output: ","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ Info: Hey\n┌ Warning: Uhoh\n└ @ Main.A.B.C\n┌ Debug: In A\n└ @ Main.A","category":"page"},{"location":"","page":"Home","title":"Home","text":"# A wasn't registered before, this will create a copy tied to A with its own log level + set its children to level Error \nmin_enabled_level!(h, A, Error)\n@warn \"This will be ignored\" _module=A.B.C _file=nothing _line=1\n@error \"This won't\" _module=A.B _file=nothing _line=1\nmin_enabled_level!(h, A, Off)\n@error \"Can't see this\" _module=A.B _file=nothing _line=1\n@error \"This will still show\" _module=A2 _file=nothing _line=1","category":"page"},{"location":"","page":"Home","title":"Home","text":"Output:","category":"page"},{"location":"","page":"Home","title":"Home","text":"┌ Error: This won't\n└ @ Main.A.B\n┌ Error: This will still show\n└ @ Main.A2","category":"page"},{"location":"","page":"Home","title":"Home","text":"Inspired by Memento","category":"page"}]
}
